<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Call - CollabSpace</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #A82400;
            --primary-dark: #8A1E00;
            --secondary-color: #D63A0D;
            --accent-color: #FFEBCD;
            --bg-color: #FFEBCD;
            --card-bg: #FFF5E6;
            --hover-bg: #FFE4CC;
            --text-primary: #A82400;
            --text-secondary: #6B4423;
            --text-dark: #3A2317;
            --white: #FFFFFF;
            --gray-50: #FAFAFA;
            --gray-100: #F5F5F5;
            --gray-200: #E5E5E5;
            --gray-300: #D4D4D4;
            --gray-600: #525252;
            --gray-800: #262626;
            --shadow-xs: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow-sm: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: var(--text-dark);
            color: var(--white);
            overflow: hidden;
            line-height: 1.6;
        }
        
        .call-container {
            height: 100vh;
            display: flex;
            flex-direction: column;
            position: relative;
        }
        
        .video-grid {
            flex: 1;
            display: grid;
            gap: 12px;
            padding: 20px;
            background: var(--gray-800);
        }
        
        .video-grid.single {
            grid-template-columns: 1fr;
        }
        
        .video-grid.two {
            grid-template-columns: 1fr 1fr;
        }
        
        .video-grid.three {
            grid-template-columns: 1fr 1fr;
            grid-template-rows: 1fr 1fr;
        }
        
        .video-grid.four {
            grid-template-columns: 1fr 1fr;
            grid-template-rows: 1fr 1fr;
        }
        
        .video-grid.many {
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        }
        
        .video-participant {
            position: relative;
            background: var(--gray-600);
            border-radius: 12px;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 200px;
            box-shadow: var(--shadow-lg);
            border: 2px solid transparent;
            transition: all 0.3s ease;
        }
        
        .video-participant:hover {
            border-color: var(--primary-color);
            transform: scale(1.02);
        }
        
        .video-participant video {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 10px;
        }
        
        .video-participant.local {
            border: 3px solid var(--primary-color);
            box-shadow: var(--shadow-xl);
        }
        
        .participant-info {
            position: absolute;
            bottom: 12px;
            left: 12px;
            background: rgba(58, 35, 23, 0.9);
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.9rem;
            display: flex;
            align-items: center;
            gap: 6px;
            color: var(--white);
            font-weight: 500;
            backdrop-filter: blur(4px);
        }
        
        .participant-avatar {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background: var(--primary-color);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem;
            font-weight: bold;
            color: var(--white);
            box-shadow: var(--shadow-lg);
        }
        
        .muted-indicator {
            color: var(--secondary-color);
        }
        
        .controls {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(transparent, rgba(58, 35, 23, 0.95));
            padding: 24px;
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 16px;
            backdrop-filter: blur(8px);
        }
        
        .control-btn {
            width: 56px;
            height: 56px;
            border-radius: 50%;
            border: none;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.3rem;
            transition: all 0.3s ease;
            background: var(--card-bg);
            color: var(--text-primary);
            box-shadow: var(--shadow-md);
            position: relative;
        }
        
        .control-btn:hover {
            background: var(--hover-bg);
            transform: scale(1.1);
            box-shadow: var(--shadow-lg);
        }
        
        .control-btn.active {
            background: var(--primary-color);
            color: var(--white);
        }
        
        .control-btn.danger {
            background: var(--secondary-color);
            color: var(--white);
        }
        
        .control-btn.danger:hover {
            background: var(--primary-dark);
        }
        
        .participants-sidebar {
            position: absolute;
            right: -320px;
            top: 0;
            width: 320px;
            height: 100%;
            background: var(--card-bg);
            transition: right 0.3s ease;
            z-index: 1000;
            padding: 24px;
            overflow-y: auto;
            box-shadow: var(--shadow-xl);
            border-left: 1px solid var(--gray-200);
        }
        
        .participants-sidebar.open {
            right: 0;
        }
        
        .sidebar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 24px;
            padding-bottom: 12px;
            border-bottom: 2px solid var(--primary-color);
        }
        
        .sidebar-header h3 {
            color: var(--text-primary);
            font-size: 1.2rem;
            font-weight: 600;
        }
        
        .sidebar-close {
            background: none;
            border: none;
            color: var(--text-secondary);
            font-size: 1.5rem;
            cursor: pointer;
            padding: 4px;
            border-radius: 6px;
            transition: all 0.3s ease;
        }
        
        .sidebar-close:hover {
            color: var(--primary-color);
            background: var(--hover-bg);
        }
        
        .participant-list {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }
        
        .participant-item {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px;
            background: var(--white);
            border-radius: 12px;
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--gray-200);
            transition: all 0.3s ease;
        }
        
        .participant-item:hover {
            background: var(--hover-bg);
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }
        
        .participant-avatar-small {
            width: 44px;
            height: 44px;
            border-radius: 50%;
            background: var(--primary-color);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1rem;
            font-weight: bold;
            color: var(--white);
            flex-shrink: 0;
        }
        
        .participant-details {
            flex: 1;
        }
        
        .participant-name {
            font-weight: 600;
            margin-bottom: 4px;
            color: var(--text-primary);
        }
        
        .participant-status {
            font-size: 0.85rem;
            color: var(--text-secondary);
            display: flex;
            gap: 8px;
        }
        
        .chat-sidebar {
            position: absolute;
            left: -380px;
            top: 0;
            width: 380px;
            height: 100%;
            background: var(--card-bg);
            transition: left 0.3s ease;
            z-index: 1000;
            display: flex;
            flex-direction: column;
            box-shadow: var(--shadow-xl);
            border-right: 1px solid var(--gray-200);
        }
        
        .chat-sidebar.open {
            left: 0;
        }
        
        .chat-header {
            padding: 24px;
            border-bottom: 2px solid var(--primary-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: var(--white);
        }
        
        .chat-header h3 {
            color: var(--text-primary);
            font-size: 1.2rem;
            font-weight: 600;
        }
        
        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            background: var(--gray-50);
        }
        
        .chat-input-container {
            padding: 20px;
            border-top: 1px solid var(--gray-200);
            background: var(--white);
        }
        
        .chat-input-group {
            display: flex;
            gap: 12px;
            align-items: center;
        }
        
        .chat-input {
            flex: 1;
            padding: 12px 16px;
            border: 2px solid var(--gray-200);
            border-radius: 24px;
            background: var(--gray-50);
            color: var(--text-dark);
            outline: none;
            font-size: 0.95rem;
            transition: all 0.3s ease;
        }
        
        .chat-input:focus {
            border-color: var(--primary-color);
            background: var(--white);
            box-shadow: 0 0 0 3px rgba(168, 36, 0, 0.1);
        }
        
        .chat-input::placeholder {
            color: var(--text-secondary);
        }
        
        .chat-send-btn {
            width: 44px;
            height: 44px;
            border-radius: 50%;
            border: none;
            background: var(--primary-color);
            color: var(--white);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            box-shadow: var(--shadow-md);
        }
        
        .chat-send-btn:hover {
            background: var(--primary-dark);
            transform: scale(1.05);
        }
        
        .chat-message {
            margin-bottom: 16px;
            display: flex;
            align-items: flex-start;
            gap: 12px;
            animation: slideInUp 0.3s ease;
        }
        
        .chat-message.own {
            flex-direction: row-reverse;
        }
        
        .chat-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: var(--primary-color);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
            font-weight: bold;
            flex-shrink: 0;
            color: var(--white);
        }
        
        .chat-content {
            background: var(--white);
            padding: 12px 16px;
            border-radius: 16px;
            max-width: 75%;
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--gray-200);
        }
        
        .chat-message.own .chat-content {
            background: var(--primary-color);
            color: var(--white);
        }
        
        .chat-meta {
            font-size: 0.75rem;
            color: var(--text-secondary);
            margin-bottom: 4px;
            font-weight: 500;
        }
        
        .chat-message.own .chat-meta {
            color: rgba(255, 255, 255, 0.8);
        }
        
        .status-indicators {
            position: absolute;
            top: 24px;
            left: 24px;
            display: flex;
            flex-direction: column;
            gap: 12px;
            z-index: 100;
        }
        
        .status-indicator {
            background: var(--card-bg);
            padding: 10px 16px;
            border-radius: 24px;
            font-size: 0.9rem;
            display: flex;
            align-items: center;
            gap: 8px;
            box-shadow: var(--shadow-md);
            border: 1px solid var(--gray-200);
            color: var(--text-primary);
            font-weight: 500;
        }
        
        .connection-status {
            color: #4caf50;
        }
        
        .recording-status {
            color: var(--secondary-color);
        }
        
        .screen-share-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: var(--text-dark);
            z-index: 500;
            display: none;
        }
        
        .screen-share-container.active {
            display: block;
        }
        
        .screen-share-video {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }
        
        .screen-share-controls {
            position: absolute;
            top: 24px;
            right: 24px;
            display: flex;
            gap: 12px;
        }
        
        .minimize-btn {
            background: var(--card-bg);
            border: none;
            color: var(--text-primary);
            padding: 12px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: var(--shadow-md);
        }
        
        .minimize-btn:hover {
            background: var(--hover-bg);
        }

        @keyframes slideInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Mobile Responsiveness */
        @media (max-width: 1024px) {
            .participants-sidebar,
            .chat-sidebar {
                width: 300px;
            }
            
            .video-grid {
                padding: 16px;
                gap: 10px;
            }
        }

        @media (max-width: 768px) {
            .participants-sidebar,
            .chat-sidebar {
                width: 100%;
                left: -100%;
                right: -100%;
            }
            
            .participants-sidebar.open {
                right: 0;
            }
            
            .chat-sidebar.open {
                left: 0;
            }
            
            .controls {
                flex-wrap: wrap;
                justify-content: center;
                padding: 16px;
                gap: 12px;
            }
            
            .control-btn {
                width: 48px;
                height: 48px;
                font-size: 1.1rem;
            }
            
            .video-grid {
                padding: 12px;
                gap: 8px;
            }
            
            .video-grid.many {
                grid-template-columns: 1fr;
            }
            
            .video-grid.two,
            .video-grid.three,
            .video-grid.four {
                grid-template-columns: 1fr;
                grid-template-rows: repeat(auto, 1fr);
            }
            
            .status-indicators {
                top: 16px;
                left: 16px;
            }
            
            .status-indicator {
                padding: 8px 12px;
                font-size: 0.8rem;
            }
        }

        @media (max-width: 480px) {
            .controls {
                padding: 12px;
                gap: 8px;
            }
            
            .control-btn {
                width: 44px;
                height: 44px;
                font-size: 1rem;
            }
            
            .video-grid {
                padding: 8px;
                gap: 6px;
            }
            
            .participant-info {
                bottom: 8px;
                left: 8px;
                padding: 4px 8px;
                font-size: 0.8rem;
            }
            
            .chat-input-container,
            .chat-header {
                padding: 16px;
            }
            
            .chat-messages {
                padding: 16px;
            }
            
            .sidebar-header {
                padding-bottom: 8px;
                margin-bottom: 16px;
            }
            
            .participant-list {
                gap: 8px;
            }
            
            .participant-item {
                padding: 10px;
            }
        }

        /* Landscape orientation on mobile */
        @media (max-width: 768px) and (orientation: landscape) {
            .video-grid.two,
            .video-grid.three,
            .video-grid.four {
                grid-template-columns: 1fr 1fr;
            }
            
            .controls {
                padding: 12px 16px;
            }
            
            .status-indicators {
                top: 12px;
                left: 12px;
            }
        }

        /* High DPI displays */
        @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
            .control-btn,
            .chat-send-btn,
            .participant-avatar,
            .participant-avatar-small {
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }
        }

        /* Reduced motion preferences */
        @media (prefers-reduced-motion: reduce) {
            * {
                animation-duration: 0.01ms !important;
                animation-iteration-count: 1 !important;
                transition-duration: 0.01ms !important;
            }
        }
    </style>
</head>
<body>
    <div class="call-container">
        <!-- Status Indicators -->
        <div class="status-indicators">
            <div class="status-indicator">
                <i class="fas fa-signal connection-status"></i>
                <span id="connectionStatus">Connected</span>
            </div>
            <div class="status-indicator" id="recordingIndicator" style="display: none;">
                <i class="fas fa-record-vinyl recording-status"></i>
                <span>Recording</span>
            </div>
        </div>

        <!-- Video Grid -->
        <div class="video-grid single" id="videoGrid">
            <div class="video-participant local" id="localVideo">
                <video id="localVideoElement" autoplay muted></video>
                <div class="participant-info">
                    <span>John Doe (You)</span>
                </div>
            </div>
        </div>

        <!-- Screen Share Container -->
        <div class="screen-share-container" id="screenShareContainer">
            <video id="screenShareVideo" class="screen-share-video" autoplay></video>
            <div class="screen-share-controls">
                <button class="minimize-btn" onclick="toggleScreenShare()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>

        <!-- Call Controls -->
        <div class="controls">
            <button class="control-btn" id="muteBtn" onclick="toggleMute()" title="Mute/Unmute">
                <i class="fas fa-microphone"></i>
            </button>
            
            <button class="control-btn" id="videoBtn" onclick="toggleVideo()" title="Camera On/Off">
                <i class="fas fa-video"></i>
            </button>
            
            <button class="control-btn" onclick="toggleChat()" title="Toggle Chat">
                <i class="fas fa-comments"></i>
            </button>
            
            <button class="control-btn" onclick="toggleScreenShare()" id="screenShareBtn" title="Share Screen">
                <i class="fas fa-desktop"></i>
            </button>
            
            <button class="control-btn" onclick="toggleParticipants()" title="Participants">
                <i class="fas fa-users"></i>
            </button>
            
            <button class="control-btn danger" onclick="leaveCall()" title="Leave Call">
                <i class="fas fa-phone-slash"></i>
            </button>
        </div>

        <!-- Chat Sidebar -->
        <div class="chat-sidebar" id="chatSidebar">
            <div class="chat-header">
                <h3>Meeting Chat</h3>
                <button class="sidebar-close" onclick="toggleChat()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="chat-messages" id="chatMessages">
                <div class="chat-message">
                    <div class="chat-avatar">A</div>
                    <div class="chat-content">
                        <div class="chat-meta">Alice • 2:30 PM</div>
                        <div>Welcome to the meeting everyone!</div>
                    </div>
                </div>
                <div class="chat-message own">
                    <div class="chat-avatar">Y</div>
                    <div class="chat-content">
                        <div class="chat-meta">You • 2:31 PM</div>
                        <div>Thanks for organizing this call.</div>
                    </div>
                </div>
            </div>
            <div class="chat-input-container">
                <div class="chat-input-group">
                    <input type="text" class="chat-input" id="chatInput" 
                           placeholder="Type a message..." maxlength="500"
                           onkeypress="handleChatKeyPress(event)">
                    <button class="chat-send-btn" onclick="sendChatMessage()">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>

        <!-- Participants Sidebar -->
        <div class="participants-sidebar" id="participantsSidebar">
            <div class="sidebar-header">
                <h3>Participants</h3>
                <button class="sidebar-close" onclick="toggleParticipants()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="participant-list" id="participantList">
                <div class="participant-item">
                    <div class="participant-avatar-small">J</div>
                    <div class="participant-details">
                        <div class="participant-name">John Doe (You)</div>
                        <div class="participant-status">
                            <i class="fas fa-microphone"></i>
                            <i class="fas fa-video"></i>
                        </div>
                    </div>
                </div>
                <div class="participant-item">
                    <div class="participant-avatar-small">A</div>
                    <div class="participant-details">
                        <div class="participant-name">Alice Smith</div>
                        <div class="participant-status">
                            <i class="fas fa-microphone-slash muted-indicator"></i>
                            <i class="fas fa-video"></i>
                        </div>
                    </div>
                </div>
                <div class="participant-item">
                    <div class="participant-avatar-small">B</div>
                    <div class="participant-details">
                        <div class="participant-name">Bob Johnson</div>
                        <div class="participant-status">
                            <i class="fas fa-microphone"></i>
                            <i class="fas fa-video-slash"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let localStream = null;
        let screenStream = null;
        let isMuted = false;
        let isVideoOff = false;
        let isScreenSharing = false;
        let participants = new Map();

        // Initialize call
        async function initializeCall() {
            try {
                // Get user media
                localStream = await navigator.mediaDevices.getUserMedia({
                    video: true,
                    audio: true
                });

                const localVideo = document.getElementById('localVideoElement');
                localVideo.srcObject = localStream;

                // Simulate adding participants for demo
                setTimeout(() => {
                    addRemoteVideo('user2', null, 'Alice Smith');
                }, 2000);
                
                setTimeout(() => {
                    addRemoteVideo('user3', null, 'Bob Johnson');
                }, 4000);

            } catch (error) {
                console.error('Error accessing media devices:', error);
                // Show avatar instead of video
                showAvatarView();
            }
        }

        function showAvatarView() {
            const localVideo = document.getElementById('localVideo');
            localVideo.innerHTML = `
                <div class="participant-avatar">J</div>
                <div class="participant-info">
                    <span>John Doe (You)</span>
                </div>
            `;
        }

        // Add remote video (simulated)
        function addRemoteVideo(userId, stream, username) {
            const videoGrid = document.getElementById('videoGrid');
            
            const videoContainer = document.createElement('div');
            videoContainer.className = 'video-participant';
            videoContainer.id = `video-${userId}`;
            
            // For demo purposes, show avatar instead of video
            videoContainer.innerHTML = `
                <div class="participant-avatar">${username.charAt(0)}</div>
                <div class="participant-info">
                    <span>${username}</span>
                </div>
            `;
            
            videoGrid.appendChild(videoContainer);
            updateVideoGrid();
        }

        // Update video grid layout
        function updateVideoGrid() {
            const videoGrid = document.getElementById('videoGrid');
            const videoCount = videoGrid.children.length;
            
            videoGrid.className = 'video-grid';
            
            if (videoCount === 1) {
                videoGrid.classList.add('single');
            } else if (videoCount === 2) {
                videoGrid.classList.add('two');
            } else if (videoCount === 3) {
                videoGrid.classList.add('three');
            } else if (videoCount === 4) {
                videoGrid.classList.add('four');
            } else {
                videoGrid.classList.add('many');
            }
        }

        // Control functions
        function toggleMute() {
            isMuted = !isMuted;
            if (localStream) {
                const audioTrack = localStream.getAudioTracks()[0];
                if (audioTrack) {
                    audioTrack.enabled = !isMuted;
                }
            }
            
            const muteBtn = document.getElementById('muteBtn');
            const icon = muteBtn.querySelector('i');
            
            if (isMuted) {
                icon.className = 'fas fa-microphone-slash';
                muteBtn.classList.add('active');
            } else {
                icon.className = 'fas fa-microphone';
                muteBtn.classList.remove('active');
            }
        }

        function toggleVideo() {
            isVideoOff = !isVideoOff;
            if (localStream) {
                const videoTrack = localStream.getVideoTracks()[0];
                if (videoTrack) {
                    videoTrack.enabled = !isVideoOff;
                }
            }
            
            const videoBtn = document.getElementById('videoBtn');
            const icon = videoBtn.querySelector('i');
            
            if (isVideoOff) {
                icon.className = 'fas fa-video-slash';
                videoBtn.classList.add('active');
                showAvatarView();
            } else {
                icon.className = 'fas fa-video';
                videoBtn.classList.remove('active');
                // Restore video view
                if (localStream) {
                    const localVideo = document.getElementById('localVideo');
                    localVideo.innerHTML = `
                        <video id="localVideoElement" autoplay muted></video>
                        <div class="participant-info">
                            <span>John Doe (You)</span>
                        </div>
                    `;
                    document.getElementById('localVideoElement').srcObject = localStream;
                }
            }
        }

        async function toggleScreenShare() {
            if (!isScreenSharing) {
                try {
                    screenStream = await navigator.mediaDevices.getDisplayMedia({
                        video: true,
                        audio: true
                    });
                    
                    const screenVideo = document.getElementById('screenShareVideo');
                    screenVideo.srcObject = screenStream;
                    
                    const screenContainer = document.getElementById('screenShareContainer');
                    screenContainer.classList.add('active');
                    
                    const screenShareBtn = document.getElementById('screenShareBtn');
                    screenShareBtn.classList.add('active');
                    
                    isScreenSharing = true;
                    
                    // Handle screen share end
                    screenStream.getVideoTracks()[0].onended = () => {
                        stopScreenShare();
                    };
                    
                } catch (error) {
                    console.error('Error sharing screen:', error);
                    alert('Could not share screen. Please check permissions.');
                }
            } else {
                stopScreenShare();
            }
        }

        function stopScreenShare() {
            if (screenStream) {
                screenStream.getTracks().forEach(track => track.stop());
                screenStream = null;
            }
            
            const screenContainer = document.getElementById('screenShareContainer');
            screenContainer.classList.remove('active');
            
            const screenShareBtn = document.getElementById('screenShareBtn');
            screenShareBtn.classList.remove('active');
            
            isScreenSharing = false;
        }

        function toggleChat() {
            const chatSidebar = document.getElementById('chatSidebar');
            const participantsSidebar = document.getElementById('participantsSidebar');
            
            // Close participants sidebar if open
            participantsSidebar.classList.remove('open');
            
            chatSidebar.classList.toggle('open');
        }

        function toggleParticipants() {
            const participantsSidebar = document.getElementById('participantsSidebar');
            const chatSidebar = document.getElementById('chatSidebar');
            
            // Close chat sidebar if open
            chatSidebar.classList.remove('open');
            
            participantsSidebar.classList.toggle('open');
        }

        function leaveCall() {
            // Stop all tracks
            if (localStream) {
                localStream.getTracks().forEach(track => track.stop());
            }
            if (screenStream) {
                screenStream.getTracks().forEach(track => track.stop());
            }
            
            // Show confirmation dialog
            if (confirm('Are you sure you want to leave the call?')) {
                // In a real app, you would emit leave event to server
                alert('You have left the call.');
                window.close();
            }
        }

        // Chat functions
        function sendChatMessage() {
            const chatInput = document.getElementById('chatInput');
            const message = chatInput.value.trim();
            
            if (message) {
                const chatData = {
                    message: message,
                    sender: 'John Doe',
                    timestamp: new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}),
                    isOwn: true
                };
                
                addChatMessage(chatData);
                chatInput.value = '';
            }
        }

        function handleChatKeyPress(event) {
            if (event.key === 'Enter') {
                sendChatMessage();
            }
        }

        function addChatMessage(data) {
            const chatMessages = document.getElementById('chatMessages');
            
            const messageDiv = document.createElement('div');
            messageDiv.className = `chat-message ${data.isOwn ? 'own' : ''}`;
            
            messageDiv.innerHTML = `
                <div class="chat-avatar">
                    ${data.sender.charAt(0).toUpperCase()}
                </div>
                <div class="chat-content">
                    <div class="chat-meta">
                        ${data.isOwn ? 'You' : data.sender} • ${data.timestamp}
                    </div>
                    <div>${data.message}</div>
                </div>
            `;
            
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Handle orientation change
        window.addEventListener('orientationchange', function() {
            setTimeout(() => {
                updateVideoGrid();
            }, 100);
        });

        // Handle window resize
        window.addEventListener('resize', function() {
            // Close sidebars on resize to larger screen
            if (window.innerWidth > 768) {
                const chatSidebar = document.getElementById('chatSidebar');
                const participantsSidebar = document.getElementById('participantsSidebar');
                
                // Don't auto-close on desktop, but ensure proper positioning
                chatSidebar.style.left = chatSidebar.classList.contains('open') ? '0' : '-380px';
                participantsSidebar.style.right = participantsSidebar.classList.contains('open') ? '0' : '-320px';
            }
        });

        // Touch gestures for mobile
        let touchStartX = 0;
        let touchStartY = 0;
        let touchEndX = 0;
        let touchEndY = 0;

        document.addEventListener('touchstart', function(event) {
            touchStartX = event.changedTouches[0].screenX;
            touchStartY = event.changedTouches[0].screenY;
        });

        document.addEventListener('touchend', function(event) {
            touchEndX = event.changedTouches[0].screenX;
            touchEndY = event.changedTouches[0].screenY;
            handleSwipe();
        });

        function handleSwipe() {
            const swipeThreshold = 50;
            const swipeDistanceX = touchEndX - touchStartX;
            const swipeDistanceY = Math.abs(touchEndY - touchStartY);
            
            // Only handle horizontal swipes
            if (swipeDistanceY < 100) {
                const chatSidebar = document.getElementById('chatSidebar');
                const participantsSidebar = document.getElementById('participantsSidebar');
                
                if (swipeDistanceX > swipeThreshold && touchStartX < 50) {
                    // Swipe right from left edge - open chat
                    chatSidebar.classList.add('open');
                    participantsSidebar.classList.remove('open');
                } else if (swipeDistanceX < -swipeThreshold && touchStartX > window.innerWidth - 50) {
                    // Swipe left from right edge - open participants
                    participantsSidebar.classList.add('open');
                    chatSidebar.classList.remove('open');
                } else if (Math.abs(swipeDistanceX) > swipeThreshold) {
                    // Close any open sidebar
                    chatSidebar.classList.remove('open');
                    participantsSidebar.classList.remove('open');
                }
            }
        }

        // Keyboard shortcuts
        document.addEventListener('keydown', function(event) {
            // Prevent shortcuts when typing in chat
            if (event.target.id === 'chatInput') return;
            
            switch(event.code) {
                case 'KeyM':
                    event.preventDefault();
                    toggleMute();
                    break;
                case 'KeyV':
                    event.preventDefault();
                    toggleVideo();
                    break;
                case 'KeyC':
                    event.preventDefault();
                    toggleChat();
                    break;
                case 'KeyP':
                    event.preventDefault();
                    toggleParticipants();
                    break;
                case 'Escape':
                    event.preventDefault();
                    // Close any open sidebars
                    document.getElementById('chatSidebar').classList.remove('open');
                    document.getElementById('participantsSidebar').classList.remove('open');
                    break;
            }
        });

        // Simulate connection status updates
        function updateConnectionStatus() {
            const statusElement = document.getElementById('connectionStatus');
            const statuses = ['Connected', 'Reconnecting...', 'Connected'];
            let currentIndex = 0;
            
            setInterval(() => {
                if (Math.random() > 0.95) { // 5% chance to show reconnecting
                    statusElement.textContent = statuses[1];
                    statusElement.style.color = '#ffa500';
                    setTimeout(() => {
                        statusElement.textContent = statuses[0];
                        statusElement.style.color = '#4caf50';
                    }, 2000);
                }
            }, 10000);
        }

        // Initialize call when page loads
        document.addEventListener('DOMContentLoaded', () => {
            initializeCall();
            updateConnectionStatus();
            
            // Focus chat input when chat is opened
            const chatSidebar = document.getElementById('chatSidebar');
            const chatInput = document.getElementById('chatInput');
            
            const observer = new MutationObserver(function(mutations) {
                mutations.forEach(function(mutation) {
                    if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                        if (chatSidebar.classList.contains('open')) {
                            setTimeout(() => chatInput.focus(), 300);
                        }
                    }
                });
            });
            
            observer.observe(chatSidebar, { attributes: true });
        });

        // Handle page unload
        window.addEventListener('beforeunload', (event) => {
            if (localStream || screenStream) {
                event.preventDefault();
                event.returnValue = 'Are you sure you want to leave the call?';
                return 'Are you sure you want to leave the call?';
            }
        });

        // Prevent zoom on mobile
        document.addEventListener('touchmove', function(event) {
            if (event.scale !== 1) {
                event.preventDefault();
            }
        }, { passive: false });

        // Handle fullscreen for better mobile experience
        function toggleFullscreen() {
            if (!document.fullscreenElement) {
                document.documentElement.requestFullscreen().catch(err => {
                    console.log('Error attempting to enable fullscreen:', err.message);
                });
            } else {
                document.exitFullscreen();
            }
        }

        // Auto-hide controls on inactivity
        let controlsTimeout;
        let isControlsVisible = true;

        function showControls() {
            const controls = document.querySelector('.controls');
            controls.style.opacity = '1';
            controls.style.pointerEvents = 'all';
            isControlsVisible = true;
            
            clearTimeout(controlsTimeout);
            controlsTimeout = setTimeout(hideControls, 5000);
        }

        function hideControls() {
            const controls = document.querySelector('.controls');
            if (!document.querySelector('.chat-sidebar.open') && !document.querySelector('.participants-sidebar.open')) {
                controls.style.opacity = '0.7';
                controls.style.pointerEvents = 'all';
                isControlsVisible = false;
            }
        }

        // Show controls on mouse move or touch
        document.addEventListener('mousemove', showControls);
        document.addEventListener('touchstart', showControls);
        document.addEventListener('click', showControls);

        // Keep controls visible when hovering
        document.querySelector('.controls').addEventListener('mouseenter', () => {
            clearTimeout(controlsTimeout);
        });

        document.querySelector('.controls').addEventListener('mouseleave', () => {
            if (isControlsVisible) {
                controlsTimeout = setTimeout(hideControls, 3000);
            }
        });
    </script>
</body>
</html>